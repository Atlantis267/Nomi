//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Script/21 test/Movement Test/Scripts/Input/TestInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInput"",
    ""maps"": [
        {
            ""name"": ""Lock test"",
            ""id"": ""341382f3-7ea3-42ea-ad3f-adc8d3ea6180"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8725288a-bc6a-4afb-9fc1-ae944b54316e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse Lock"",
                    ""type"": ""Value"",
                    ""id"": ""1ad7ba8f-8cda-462d-88e6-fd09159d704c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f4cd4bf2-b638-40b7-9948-853851ac6530"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slowmotion"",
                    ""type"": ""Button"",
                    ""id"": ""7060a084-4b06-4cb2-91ff-0d567a710aa5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a645b57-a126-4ad8-983d-e2c1005d208e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""5903106d-3241-4434-83b0-ea9978f1928b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f1b90c81-0089-439e-8d32-702092c13223"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7fa793d7-1dc5-4c4b-90ff-c35f76fa2da0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9a14702d-8fef-4dec-8dbf-82e011528536"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""beaee7c0-fa93-4d6a-a71e-5030b3c68319"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e98debac-bf20-4264-b284-107adb9cbe48"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4449ab03-0a1f-44ca-9cd0-5805831105b8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slowmotion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Lock test
        m_Locktest = asset.FindActionMap("Lock test", throwIfNotFound: true);
        m_Locktest_Move = m_Locktest.FindAction("Move", throwIfNotFound: true);
        m_Locktest_MouseLock = m_Locktest.FindAction("Mouse Lock", throwIfNotFound: true);
        m_Locktest_Jump = m_Locktest.FindAction("Jump", throwIfNotFound: true);
        m_Locktest_Slowmotion = m_Locktest.FindAction("Slowmotion", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Lock test
    private readonly InputActionMap m_Locktest;
    private List<ILocktestActions> m_LocktestActionsCallbackInterfaces = new List<ILocktestActions>();
    private readonly InputAction m_Locktest_Move;
    private readonly InputAction m_Locktest_MouseLock;
    private readonly InputAction m_Locktest_Jump;
    private readonly InputAction m_Locktest_Slowmotion;
    public struct LocktestActions
    {
        private @TestInput m_Wrapper;
        public LocktestActions(@TestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Locktest_Move;
        public InputAction @MouseLock => m_Wrapper.m_Locktest_MouseLock;
        public InputAction @Jump => m_Wrapper.m_Locktest_Jump;
        public InputAction @Slowmotion => m_Wrapper.m_Locktest_Slowmotion;
        public InputActionMap Get() { return m_Wrapper.m_Locktest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LocktestActions set) { return set.Get(); }
        public void AddCallbacks(ILocktestActions instance)
        {
            if (instance == null || m_Wrapper.m_LocktestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LocktestActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MouseLock.started += instance.OnMouseLock;
            @MouseLock.performed += instance.OnMouseLock;
            @MouseLock.canceled += instance.OnMouseLock;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Slowmotion.started += instance.OnSlowmotion;
            @Slowmotion.performed += instance.OnSlowmotion;
            @Slowmotion.canceled += instance.OnSlowmotion;
        }

        private void UnregisterCallbacks(ILocktestActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MouseLock.started -= instance.OnMouseLock;
            @MouseLock.performed -= instance.OnMouseLock;
            @MouseLock.canceled -= instance.OnMouseLock;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Slowmotion.started -= instance.OnSlowmotion;
            @Slowmotion.performed -= instance.OnSlowmotion;
            @Slowmotion.canceled -= instance.OnSlowmotion;
        }

        public void RemoveCallbacks(ILocktestActions instance)
        {
            if (m_Wrapper.m_LocktestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILocktestActions instance)
        {
            foreach (var item in m_Wrapper.m_LocktestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LocktestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LocktestActions @Locktest => new LocktestActions(this);
    public interface ILocktestActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMouseLock(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSlowmotion(InputAction.CallbackContext context);
    }
}
